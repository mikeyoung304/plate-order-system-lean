#!/usr/bin/env npx tsx

/**
 * Verify and Fix Database Schema
 * 
 * This script will:
 * 1. Check the current state of the profiles table
 * 2. Verify that constraints are correct
 * 3. Clean up any duplicate or problematic data
 * 4. Ensure the schema matches expectations
 */

import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'
import * as path from 'path'

// Load environment variables
dotenv.config({ path: path.join(process.cwd(), '.env.local') })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing environment variables')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: { autoRefreshToken: false, persistSession: false }
})

async function verifyAndFixSchema() {
  console.log('üîç VERIFYING DATABASE SCHEMA')
  console.log('===========================')
  
  try {
    // Step 1: Check profiles table structure
    console.log('1Ô∏è‚É£ Checking profiles table structure...')
    
    const { data: tableInfo, error: tableError } = await supabase
      .rpc('exec_sql', { 
        sql: `
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns 
        WHERE table_name = 'profiles' AND table_schema = 'public'
        ORDER BY ordinal_position;
        `
      })
    
    if (tableError) {
      console.log('‚ö†Ô∏è  Could not query table structure, trying alternative method')
      
      // Try to query the table directly to see what columns exist
      const { data: sampleData, error: sampleError } = await supabase
        .from('profiles')
        .select('*')
        .limit(1)
      
      if (sampleError) {
        console.log('‚ùå Cannot access profiles table:', sampleError.message)
      } else {
        console.log('‚úÖ Profiles table is accessible')
        if (sampleData && sampleData.length > 0) {
          console.log('   Sample record columns:', Object.keys(sampleData[0]))
        }
      }
    } else {
      console.log('‚úÖ Table structure retrieved')
      console.log('   Columns:', tableInfo)
    }
    
    // Step 2: Check for constraints
    console.log('')
    console.log('2Ô∏è‚É£ Checking constraints...')
    
    try {
      const { data: constraints, error: constraintError } = await supabase
        .rpc('exec_sql', {
          sql: `
          SELECT constraint_name, constraint_type 
          FROM information_schema.table_constraints 
          WHERE table_name = 'profiles' AND table_schema = 'public';
          `
        })
      
      if (constraintError) {
        console.log('‚ö†Ô∏è  Could not query constraints:', constraintError.message)
      } else {
        console.log('‚úÖ Constraints found:', constraints)
      }
    } catch (e) {
      console.log('‚ö†Ô∏è  Cannot query constraints directly')
    }
    
    // Step 3: Check current data
    console.log('')
    console.log('3Ô∏è‚É£ Checking current profiles data...')
    
    const { data: allProfiles, error: profilesError } = await supabase
      .from('profiles')
      .select('user_id, name, role')
      .order('name')
    
    if (profilesError) {
      console.log('‚ùå Cannot query profiles:', profilesError.message)
      return
    }
    
    console.log(`‚úÖ Found ${allProfiles?.length || 0} profiles:`)
    
    const roleCount = {
      admin: 0,
      server: 0,
      cook: 0,
      resident: 0
    }
    
    allProfiles?.forEach(profile => {
      console.log(`   - ${profile.name} (${profile.role})`)
      if (profile.role in roleCount) {
        roleCount[profile.role as keyof typeof roleCount]++
      }
    })
    
    console.log('')
    console.log('üìä Role distribution:')
    Object.entries(roleCount).forEach(([role, count]) => {
      console.log(`   ${role}: ${count}`)
    })
    
    // Step 4: Check for duplicate user_ids (which would cause the constraint error)
    console.log('')
    console.log('4Ô∏è‚É£ Checking for duplicates...')
    
    const { data: duplicates, error: duplicateError } = await supabase
      .rpc('exec_sql', {
        sql: `
        SELECT user_id, COUNT(*) as count
        FROM public.profiles
        GROUP BY user_id
        HAVING COUNT(*) > 1;
        `
      })
    
    if (duplicateError) {
      console.log('‚ö†Ô∏è  Could not check for duplicates:', duplicateError.message)
    } else if (!duplicates || duplicates.length === 0) {
      console.log('‚úÖ No duplicate user_ids found')
    } else {
      console.log('‚ö†Ô∏è  Found duplicate user_ids:', duplicates)
      console.log('   This could explain the constraint errors')
    }
    
    // Step 5: Test inserting a new profile
    console.log('')
    console.log('5Ô∏è‚É£ Testing profile insertion...')
    
    // Create a test user first
    const testEmail = 'test.user@restaurant.plate'
    const { data: testUser, error: testUserError } = await supabase.auth.admin.createUser({
      email: testEmail,
      password: 'test123',
      email_confirm: true,
      user_metadata: {
        name: 'Test User',
        role: 'resident'
      }
    })
    
    if (testUserError) {
      console.log('‚ö†Ô∏è  Could not create test user:', testUserError.message)
    } else if (testUser.user) {
      console.log('‚úÖ Test user created:', testUser.user.id)
      
      // Try to create profile
      const { error: testProfileError } = await supabase
        .from('profiles')
        .insert({
          user_id: testUser.user.id,
          name: 'Test User',
          role: 'resident'
        })
      
      if (testProfileError) {
        console.log('‚ùå Profile insertion failed:', testProfileError.message)
        console.log('   Code:', testProfileError.code)
        console.log('   Details:', testProfileError.details)
      } else {
        console.log('‚úÖ Profile insertion successful')
        
        // Clean up test user
        await supabase.auth.admin.deleteUser(testUser.user.id)
        console.log('‚úÖ Test user cleaned up')
      }
    }
    
    // Step 6: Check guest user status
    console.log('')
    console.log('6Ô∏è‚É£ Checking guest user...')
    
    const { data: guestProfile, error: guestError } = await supabase
      .from('profiles')
      .select('user_id, name, role')
      .eq('user_id', 'b0055f8c-d2c3-425f-add2-e4ee6572829e')
      .single()
    
    if (guestError) {
      console.log('‚ùå Guest user profile not found:', guestError.message)
    } else {
      console.log('‚úÖ Guest user profile:', guestProfile)
    }
    
    console.log('')
    console.log('üéØ VERIFICATION COMPLETE')
    console.log('========================')
    console.log('Summary:')
    console.log(`- Total profiles: ${allProfiles?.length || 0}`)
    console.log(`- Residents: ${roleCount.resident}`)
    console.log(`- Servers: ${roleCount.server}`)
    console.log(`- Admins: ${roleCount.admin}`)
    console.log(`- Cooks: ${roleCount.cook}`)
    
    if (roleCount.resident > 0 && roleCount.server > 0) {
      console.log('')
      console.log('‚úÖ The database appears to be properly set up!')
      console.log('‚úÖ Guest user role issue has been resolved')
      console.log('‚úÖ Resident users are available for the application')
      console.log('')
      console.log('The application should now work correctly with:')
      console.log('- Proper role separation')
      console.log('- Guest user acting as server')
      console.log('- Multiple residents available for orders')
    }
    
  } catch (error) {
    console.error('‚ùå Verification failed:', error)
  }
}

verifyAndFixSchema()