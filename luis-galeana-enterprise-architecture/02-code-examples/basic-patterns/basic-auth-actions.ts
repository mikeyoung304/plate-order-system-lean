/**
 * File generated by Modular Assembly - Foundation Tier
 * IMPORTANT!!! Ask the user before editing this file.
 */

'use server'

import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'
import { createClient } from './basic-server'

/**
 * Foundation Tier: Basic Authentication Actions
 * 
 * Purpose: Simple server actions for authentication
 * Suitable for: Basic auth flows, MVP development
 * 
 * Features:
 * - Server-side authentication
 * - Form data handling
 * - Basic error handling
 * - Redirect management
 */

type ActionResult = {
  error?: string
  success?: boolean
}

/**
 * Sign In Action
 * 
 * Handles user login with email and password
 */
export async function signIn(
  prevState: ActionResult | null,
  formData: FormData
): Promise<ActionResult> {
  const supabase = await createClient()

  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  }

  // Basic validation
  if (!data.email || !data.password) {
    return { error: 'Email and password are required' }
  }

  const { error } = await supabase.auth.signInWithPassword(data)

  if (error) {
    return { error: error.message }
  }

  revalidatePath('/', 'layout')
  redirect('/dashboard')
}

/**
 * Sign Up Action
 * 
 * Handles user registration
 */
export async function signUp(
  prevState: ActionResult | null,
  formData: FormData
): Promise<ActionResult> {
  const supabase = await createClient()

  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  }

  // Basic validation
  if (!data.email || !data.password) {
    return { error: 'Email and password are required' }
  }

  if (data.password.length < 6) {
    return { error: 'Password must be at least 6 characters' }
  }

  const { error } = await supabase.auth.signUp(data)

  if (error) {
    return { error: error.message }
  }

  return { success: true }
}

/**
 * Sign Out Action
 * 
 * Handles user logout
 */
export async function signOut(): Promise<void> {
  const supabase = await createClient()

  const { error } = await supabase.auth.signOut()

  if (error) {
    console.error('Error signing out:', error)
  }

  revalidatePath('/', 'layout')
  redirect('/login')
}

/**
 * Usage Example (Login Form):
 * 
 * 'use client'
 * 
 * import { useFormState } from 'react-dom'
 * import { signIn } from './basic-auth-actions'
 * 
 * export function LoginForm() {
 *   const [state, formAction] = useFormState(signIn, null)
 * 
 *   return (
 *     <form action={formAction}>
 *       <input name="email" type="email" required />
 *       <input name="password" type="password" required />
 *       <button type="submit">Sign In</button>
 *       {state?.error && <p className="error">{state.error}</p>}
 *     </form>
 *   )
 * }
 */

/**
 * Benefits:
 * - Simple to implement
 * - Server-side security
 * - Form integration
 * - Automatic redirects
 * 
 * Limitations:
 * - Basic error handling
 * - No retry logic
 * - No advanced validation
 * - No audit logging
 */