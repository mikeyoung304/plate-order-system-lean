/**
 * File generated by Modular Assembly - Foundation Tier
 * IMPORTANT!!! Ask the user before editing this file.
 */

import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'
import { Database } from '@/types/database'

/**
 * Foundation Tier: Basic Server-Side Supabase Client
 * 
 * Purpose: Simple server-side database client with cookie integration
 * Suitable for: SSR applications, API routes, server components
 * 
 * Features:
 * - Server-side rendering support
 * - Cookie-based session management
 * - TypeScript integration
 * - Next.js optimization
 */
export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}

/**
 * Usage Example (Server Component):
 * 
 * export default async function ServerComponent() {
 *   const supabase = await createClient()
 *   
 *   const { data: { user } } = await supabase.auth.getUser()
 *   
 *   if (!user) {
 *     redirect('/login')
 *   }
 *   
 *   const { data: orders } = await supabase
 *     .from('orders')
 *     .select('*')
 *     .eq('user_id', user.id)
 *   
 *   return <OrderList orders={orders} />
 * }
 */

/**
 * Usage Example (API Route):
 * 
 * export async function GET() {
 *   const supabase = await createClient()
 *   
 *   const { data, error } = await supabase
 *     .from('orders')
 *     .select('*')
 *   
 *   if (error) {
 *     return Response.json({ error: error.message }, { status: 500 })
 *   }
 *   
 *   return Response.json({ orders: data })
 * }
 */

/**
 * Benefits:
 * - Automatic session management
 * - SSR compatibility
 * - Cookie integration
 * - Simple API
 * 
 * Limitations:
 * - No connection pooling
 * - Basic error handling
 * - No performance monitoring
 * - No production optimizations
 */