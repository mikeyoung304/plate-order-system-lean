/**
 * File generated by Modular Assembly
 * IMPORTANT!!! Ask the user before editing this file.
 */

import OpenAI from "openai";

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});


export async function transcribeAudioFile(audioBlob: Blob, filename: string = "audio.webm"): Promise<{ items: string[], transcription: string }> {
    try {
        // Convert Blob to File object for OpenAI API
        const audioFile = new File([audioBlob], filename, { type: audioBlob.type });

        const transcription = await openai.audio.transcriptions.create({
            file: audioFile,
            model: "gpt-4o-transcribe",
            prompt: "Transcribe this order and return a JSON array of menu items. Each item should be a string representing a food or drink item. For example: [\"Caesar Salad\", \"Grilled Chicken\", \"Coca Cola\"]. Only return the JSON array, no other text.",
        });

        // Parse the JSON response to extract the array of items
        try {
            const items = JSON.parse(transcription.text);
            if (Array.isArray(items) && items.every(item => typeof item === 'string')) {
                return {
                    items: items,
                    transcription: transcription.text
                };
            } else {
                console.error("Transcription did not return proper JSON array", transcription.text);
                throw new Error(`Invalid transcription format: ${transcription.text}`);
            }
        } catch (parseError) {
            console.error("Failed to parse transcription as JSON", transcription.text);
            throw new Error(`Failed to parse transcription: ${transcription.text}`);
        }
    } catch (error) {
        console.error("Error transcribing audio:", error);
        throw new Error("Failed to transcribe audio");
    }
}
